{"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JGy4edqa8OcX","executionInfo":{"status":"ok","timestamp":1664612199123,"user_tz":-360,"elapsed":20398,"user":{"displayName":"Pranta paul","userId":"10810723796296608869"}},"outputId":"2c91dffd-638c-4c49-a447-2156ea51cac4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["#Import scikit-learn dataset library\n","from sklearn import datasets\n","\n","#Load dataset\n","iris = datasets.load_iris()"],"metadata":{"id":"_X8nGEz58jI4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# print the label species(setosa, versicolor,virginica)\n","print(iris.target_names)\n","\n","# print the names of the four features\n","print(iris.feature_names)\n","['setosa' 'versicolor' 'virginica']\n","['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bDhQkUkv8pKG","executionInfo":{"status":"ok","timestamp":1664612205530,"user_tz":-360,"elapsed":380,"user":{"displayName":"Pranta paul","userId":"10810723796296608869"}},"outputId":"88fab8bf-3b55-46bb-c4d7-4098dcb7bc66"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['setosa' 'versicolor' 'virginica']\n","['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']\n"]},{"output_type":"execute_result","data":{"text/plain":["['sepal length (cm)',\n"," 'sepal width (cm)',\n"," 'petal length (cm)',\n"," 'petal width (cm)']"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["# print the iris data (top 5 records)\n","print(iris.data[0:5])\n","\n","# print the iris labels (0:setosa, 1:versicolor, 2:virginica)\n","print(iris.target)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yqeoc9Qg8xXO","executionInfo":{"status":"ok","timestamp":1664612209234,"user_tz":-360,"elapsed":380,"user":{"displayName":"Pranta paul","userId":"10810723796296608869"}},"outputId":"aac72cad-2359-4347-8773-fb1988550a77"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[5.1 3.5 1.4 0.2]\n"," [4.9 3.  1.4 0.2]\n"," [4.7 3.2 1.3 0.2]\n"," [4.6 3.1 1.5 0.2]\n"," [5.  3.6 1.4 0.2]]\n","[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"," 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2\n"," 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n"," 2 2]\n"]}]},{"cell_type":"code","source":["# Creating a DataFrame of given iris dataset.\n","import pandas as pd\n","data=pd.DataFrame({\n","    'sepal length':iris.data[:,0],\n","    'sepal width':iris.data[:,1],\n","    'petal length':iris.data[:,2],\n","    'petal width':iris.data[:,3],\n","    'species':iris.target\n","})\n","data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"HdjX3ye382xu","executionInfo":{"status":"ok","timestamp":1664612258183,"user_tz":-360,"elapsed":368,"user":{"displayName":"Pranta paul","userId":"10810723796296608869"}},"outputId":"1df0131d-5b9d-4f42-d4da-64abe9baa972"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   sepal length  sepal width  petal length  petal width  species\n","0           5.1          3.5           1.4          0.2        0\n","1           4.9          3.0           1.4          0.2        0\n","2           4.7          3.2           1.3          0.2        0\n","3           4.6          3.1           1.5          0.2        0\n","4           5.0          3.6           1.4          0.2        0"],"text/html":["\n","  <div id=\"df-daabe597-eaea-436e-b432-42b25c1b48eb\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal length</th>\n","      <th>sepal width</th>\n","      <th>petal length</th>\n","      <th>petal width</th>\n","      <th>species</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-daabe597-eaea-436e-b432-42b25c1b48eb')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-daabe597-eaea-436e-b432-42b25c1b48eb button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-daabe597-eaea-436e-b432-42b25c1b48eb');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["# Import train_test_split function\n","from sklearn.model_selection import train_test_split\n","\n","X=data[['sepal length', 'sepal width', 'petal length', 'petal width']]  # Features\n","y=data['species']  # Labels\n","\n","# Split dataset into training set and test set\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3) # 70% training and 30% test"],"metadata":{"id":"0v7-qfZe89Im"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Import Random Forest Model\n","from sklearn.ensemble import RandomForestClassifier\n","\n","#Create a Gaussian Classifier\n","clf=RandomForestClassifier(n_estimators=100)\n","\n","#Train the model using the training sets y_pred=clf.predict(X_test)\n","clf.fit(X_train,y_train)\n","\n","y_pred=clf.predict(X_test)"],"metadata":{"id":"DXGad-t59CnW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Import scikit-learn metrics module for accuracy calculation\n","from sklearn import metrics\n","# Model Accuracy, how often is the classifier correct?\n","print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n","Accuracy: 0.9333333333333333"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CyHbkWcu9HQO","executionInfo":{"status":"ok","timestamp":1664612269411,"user_tz":-360,"elapsed":2,"user":{"displayName":"Pranta paul","userId":"10810723796296608869"}},"outputId":"72cf585d-2036-4db6-ccde-e639a0150d37"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 1.0\n"]}]},{"cell_type":"code","source":["species_idx = clf.predict([[3, 5, 4, 2]])[0]\n","iris.target_names[species_idx]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":92},"id":"bwlTNG5l9I79","executionInfo":{"status":"ok","timestamp":1664612272720,"user_tz":-360,"elapsed":4,"user":{"displayName":"Pranta paul","userId":"10810723796296608869"}},"outputId":"2aaf563c-7a4b-4a8d-bb18-8f6df5280068"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n","  \"X does not have valid feature names, but\"\n"]},{"output_type":"execute_result","data":{"text/plain":["'versicolor'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["import pandas as pd\n","feature_imp = pd.Series(clf.feature_importances_,index=iris.feature_names).sort_values(ascending=False)\n","feature_imp"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lk9TQUIr9RMm","executionInfo":{"status":"ok","timestamp":1664612277295,"user_tz":-360,"elapsed":353,"user":{"displayName":"Pranta paul","userId":"10810723796296608869"}},"outputId":"81b67a6b-8ab6-4203-9a1e-2e608968dcde"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["petal width (cm)     0.451955\n","petal length (cm)    0.406768\n","sepal length (cm)    0.104420\n","sepal width (cm)     0.036857\n","dtype: float64"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline\n","\n","# Creating a bar plot\n","sns.barplot(x=feature_imp, y=feature_imp.index)\n","\n","# Add labels to your graph\n","plt.xlabel('Feature Importance Score')\n","plt.ylabel('Features')\n","plt.title(\"Visualizing Important Features\")\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":313},"id":"_XEpN6Cp9S1e","executionInfo":{"status":"ok","timestamp":1664612281403,"user_tz":-360,"elapsed":454,"user":{"displayName":"Pranta paul","userId":"10810723796296608869"}},"outputId":"60165ce0-f375-4831-9e8e-1b40aa1ded95"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:matplotlib.legend:No handles with labels found to put in legend.\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# Import train_test_split function\n","from sklearn.model_selection import train_test_split\n","\n","# Split dataset into features and labels\n","X=data[['petal length', 'petal width','sepal length']]  # Removed feature \"sepal length\"\n","y=data['species']                                       \n","# Split dataset into training set and test set\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3) # 70% training and 30% test"],"metadata":{"id":"Ezz9FHce-d9g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","\n","#Create a Gaussian Classifier\n","clf=RandomForestClassifier(n_estimators=100)\n","\n","#Train the model using the training sets y_pred=clf.predict(X_test)\n","clf.fit(X_train,y_train)\n","\n","# prediction on test set\n","y_pred=clf.predict(X_test)\n","\n","#Import scikit-learn metrics module for accuracy calculation\n","from sklearn import metrics\n","# Model Accuracy, how often is the classifier correct?\n","print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))"],"metadata":{"id":"tGeg3VsZ-8P4","executionInfo":{"status":"ok","timestamp":1664612289440,"user_tz":-360,"elapsed":362,"user":{"displayName":"Pranta paul","userId":"10810723796296608869"}},"outputId":"f9607eb6-a9f3-4263-b4e8-e43a7c74f855","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9555555555555556\n"]}]}],"metadata":{"colab":{"collapsed_sections":[],"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1664013572902}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}